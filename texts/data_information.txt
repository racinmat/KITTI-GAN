velodyne, first dimension (velo[:, 0]):
min: -80
max: 80

distance 5 is taken as minimum in front of car and camera image
so for displayed velo distance:
min: 5
max: 80

features of NOT normalized images are:
rz,
tracklet['h'] / tracklet['w'],      # height/width ratio
tracklet['l'] / tracklet['w'],      # depth/width ratio
corner_ldf.T[2]                     # distance from image

features of normalized images are:
rz,
tracklet['h'] / tracklet['w'],      # height/width ratio
tracklet['l'] / tracklet['w'],      # depth/width ratio
corner_ldf.T[2]                     # distance from image
image size x,
image size y,

vyhodit velo data mimo 3D průmět bounding boxu - tedy nebudou tam data, která jsou mimo 3D bb, ale v 2D bb

zkusit u učení:
s interpolací, bez interpolace
s pozadím, bez pozadí


validační data brát z jiných jízd než trénovací - abych viděl, jak se to dobře učí

u trén. dat lze zjistit, jestli je to foreground nebo background - protože vím, kde je bb v obrázku a z jaké hloubky jsou velo data
-> 3 druhy: foreground - velo data z auta, background, velo data za bb, nan -> kdy velo selhalo

pak se podívat na data před učením, a kdyžtak obrázky uploadnout



trained: na serveru:
    1503417949 - naučeno, 1000 epoch, lidar data
    1503424646 - naučeno, 1000 epoch, generátor se učí 2x na jedno učení diskriminátoru, lidar data
    1503445579 - nedoučeno, nepovedený pokus s bílými fotkami
    1503448151 - naučeno, 1000 epoch, barevné fotky
    1503471371 - částečně naučeno, asi 300 epoch, barevné fotky
    1503492560 - naučeno, 10000 epoch, barevné fotky
    1503666003 - naučeno, 5000 epoch, GAN + L1 loss, barevné fotky, batch size 36
    1503735680 - naučeno, 1000 epoch, GAN + L1 loss, lidar data, batch size 64
    1505674290 - učí se, 5000 epoch, barevné fotky, GAN + L1 loss, ratio 100
