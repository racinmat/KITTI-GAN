# Autogenerated with SMOP
from smop.core import *
import ruamel.yaml as yaml


# /opt/project/devkit/matlab/loadCalibrationCamToCam.m


@function
def loadCalibrationCamToCam(filename=None, *args, **kwargs):
    varargin = loadCalibrationCamToCam.varargin
    nargin = loadCalibrationCamToCam.nargin

    # open file
    fid = fopen(filename, 'r')
    calib = {}

    if fid < 0:
        return []

    # read corner distance
    calib['cornerdist'] = readVariable(fid, 'corner_dist', 1, 1)
    # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:12
    # read all cameras (maximum: 100)
    for cam in arange(1, 100).reshape(-1):
        # read variables
        S_ = readVariable(fid, 'S_{:02d}'.format(cam - 1), 1, 2)
        # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:18
        K_ = readVariable(fid, 'K_{:02d}'.format(cam - 1), 3, 3)
        # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:19
        D_ = readVariable(fid, 'D_{:02d}'.format(cam - 1), 1, 5)
        # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:20
        R_ = readVariable(fid, 'R_{:02d}'.format(cam - 1), 3, 3)
        # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:21
        T_ = readVariable(fid, 'T_{:02d}'.format(cam - 1), 3, 1)
        # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:22
        S_rect_ = readVariable(fid, 'S_rect_{:02d}'.format(cam - 1), 1, 2)
        # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:23
        R_rect_ = readVariable(fid, 'R_rect_{:02d}'.format(cam - 1), 3, 3)
        # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:24
        P_rect_ = readVariable(fid, 'P_rect_{:02d}'.format(cam - 1), 3, 4)
        # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:25
        if isempty(S_) or isempty(K_) or isempty(D_) or isempty(R_) or isempty(T_):
            break
        # write calibration
        calib[S[cam]] = S_
        calib[K[cam]] = K_
        calib[D[cam]] = D_
        calib[R[cam]] = R_
        calib[T[cam]] = T_

        if logical_not(isempty(S_rect_)) and logical_not(isempty(R_rect_)) and logical_not(isempty(P_rect_)):
            calib[S_rect[cam]] = S_rect_
            # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:41
            calib[R_rect[cam]] = R_rect_
            # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:42
            calib[P_rect[cam]] = P_rect_
        # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:43

    # close file
    fclose(fid)
    ##############################################


##############################################


@function
def readVariable(fid=None, name=None, M=None, N=None, *args, **kwargs):
    varargin = readVariable.varargin
    nargin = readVariable.nargin

    try:
        data = yaml.safe_load(fid)
    except yaml.YAMLError as exc:
        return matlabarray([])

    # fill matrix
    A = zeros(M, N)
    # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:74
    if M != 1 or N != 1:
        values = data[name].split()
        values = values.reshape(M, N)
        return values
    else:
        return data[name]

# for m in arange(1,M).reshape(-1):
#         for n in arange(1,N).reshape(-1):
#             val,success=fscanf(fid,'%f',1,nargout=2)
# # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:77
#             if success:
#                 A[m,n]=val
# # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:79
#             else:
#                 A=matlabarray([])
# # /opt/project/devkit/matlab/loadCalibrationCamToCam.m:81
#                 return A
